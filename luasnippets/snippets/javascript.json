{
	"named function": {
		"prefix": "func",
		"body": "function ${0:name} (${1:arguments}) {\n\t${2}\n}"
	},
	"anonymous function": {
		"prefix": "anfunc",
		"body": "function (${0:arguments}) {${1}}"
	},
	"arrow function": {
		"prefix": "af",
		"body": "(${0:arguments}) => ${1:statement}"
	},
	"async named function": {
		"prefix": "asfunc",
		"body": "async function ${0:name} (${1:arguments}) {\n\t${2}\n}"
	},
	"async anonymous function": {
		"prefix": "asfunc",
		"body": "async function (${0:arguments}) {\n\t${1}\n}"
	},
	"async arrow function": {
		"prefix": "asaf",
		"body": "async (${0:arguments}) => {\n\t${1}\n}"
	},
	"if statement": {
		"prefix": "if",
		"body": "if (${0:condition}) {\n\t${1}\n}"
	},
	"else if statement": {
		"prefix": "ei",
		"body": "else if (${0:condition}) {\n\t${1}\n}"
	},
	"else statement": {
		"prefix": "el",
		"body": "else {\n\t${0}\n}"
	},
	"ternary": {
		"prefix": "te",
		"body": "${0:cond} ? ${1:true} : ${2:false}"
	},
	"for loop": {
		"prefix": "for",
		"body": [
			"for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
			"\tconst ${3:element} = ${2:array}[${1:index}];",
			"\t${0}",
			"}"
		]
	},
	"for-in loop": {
		"prefix": "forin",
		"body": "for (const ${0:key} in ${1:object}) {\n\t${2}\n}"
	},
	"for-of loop": {
		"prefix": "forof",
		"body": [
			"for (const ${0:iterator} of ${1:object}) {",
			"\t${2}",
			"}"
		]
	},
	"for-await-of loop": {
		"prefix": "forawaitof",
		"body": [
			"for await (const ${0:iterator} of ${1:object}) {",
			"\t${2}",
			"}"
		]
	},
	"switch statement": {
		"prefix": "switch",
		"body": [
			"switch (${0:key}) {",
			"\tcase ${1:value}:",
			"\t\t${2}",
			"\t\tbreak;",
			"",
			"\tdefault:",
			"\t\tbreak;",
			"}"
		]
	},
	"while statement": {
		"prefix": "while",
		"body": "while (${0:condition}) {\n\t${1}\n}"
	},
	"do-while statement": {
		"prefix": "dowhile",
		"body": "do {\n\t${0}\n} while (${1:condition});"
	},
	"forEach loop": {
		"prefix": "fe",
		"body": "forEach((${0:item}) => {\n\t${1}\n})"
	},
	"map": {
		"prefix": "map",
		"body": "map((${0:item}) => {\n\t${1}\n})"
	},
	"reduce": {
		"prefix": "reduce",
		"body": "reduce((${0:previous}, ${1:current}) => {\n\t${2}\n})"
	},
	"filter": {
		"prefix": "filter",
		"body": "filter((${0:item}) => {\n\t${1}\n})"
	},
	"find": {
		"prefix": "find",
		"body": "find((${0:item}) => {\n\t${1}\n})"
	},
	"every": {
		"prefix": "every",
		"body": "every((${0:item}) => {\n\t${1}\n})"
	},
	"console.log": {
		"prefix": "clg",
		"body": "console.log(${0})"
	},
	"console.log a variable": {
		"prefix": "clgv",
		"body": "console.log('${0}:', ${0})"
	},
	"console.error": {
		"prefix": "cerr",
		"body": "console.error(${0})"
	},
	"console.warn": {
		"prefix": "cwarn",
		"body": "console.warn(${0})"
	},
	"console.dir": {
		"prefix": "cdir",
		"body": "console.dir('${0}:', ${0})"
	},
	"JSON.stringify()": {
		"prefix": "js",
		"body": "JSON.stringify(${0})"
	},
	"JSON.parse()": {
		"prefix": "jp",
		"body": "JSON.parse(${0})"
	},
	"class": {
		"prefix": "cs",
		"body": "class ${0:name} {\n\t${1}\n}"
	},
	"class extends": {
		"prefix": "csx",
		"body": "class ${0:name} extends ${1:base} {\n\t${2}\n}"
	},
	"constructor": {
		"prefix": "cn",
		"body": "constructor () {\n\t${0}\n}"
	},
	"method": {
		"prefix": "m",
		"body": "${0:method} (${1:arguments}) {\n\t${2}\n}"
	},
	"getter": {
		"prefix": "get",
		"body": "get ${0:property} () {\n\t${1}\n}"
	},
	"setter": {
		"prefix": "set",
		"body": "set ${0:property} (${1:value}) {\n\t${2}\n}"
	},
	"Object.keys": {
		"prefix": "ok",
		"body": "Object.keys(${0:obj})"
	},
	"Object.values": {
		"prefix": "ov",
		"body": "Object.values(${0:obj})"
	},
	"Object.entries": {
		"prefix": "oe",
		"body": "Object.entries(${0:obj})"
	},
	"some": {
		"prefix": "some",
		"body": "some((${0:item}) => {\n\t${1}\n})"
	},
	"throw new Error": {
		"prefix": "tn",
		"body": "throw new ${0:error}"
	},
	"try/catch": {
		"prefix": "tc",
		"body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
	},
	"try/finally": {
		"prefix": "tf",
		"body": "try {\n\t${0}\n} finally {\n\t\n}"
	},
	"try/catch/finally": {
		"prefix": "tcf",
		"body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
	},
	"await Promise.all": {
		"prefix": "apa",
		"body": "await Promise.all(${0:value})"
	},
	"await Promise.all map": {
		"prefix": "apm",
		"body": "await Promise.all(${0:array}.map(async (${1:value}) => {\n\t${2}\n}))"
	},
	"await sleep": {
		"prefix": "ast",
		"body": "await new Promise((r) => setTimeout(r, ${0}))"
	},
	"Promise.all": {
		"prefix": "pa",
		"body": "Promise.all(${0:value})"
	},
	"new Promise": {
		"prefix": "np",
		"body": "new Promise((resolve, reject) => {\n\t${0}\n})"
	},
	"Promise.then": {
		"prefix": "pt",
		"body": "${0:promise}.then((${1:value}) => {\n\t${2}\n})"
	},
	"Promise.catch": {
		"prefix": "pc",
		"body": "${0:promise}.catch(error => {\n\t${1}\n})"
	},
	"setTimeout": {
		"prefix": "settimeout",
		"body": [
			"setTimeout(() => {",
			"\t${0}",
			"}, ${1:timeout});"
		]
	},
	"setInterval": {
		"prefix": "setinterval",
		"body": [
			"setInterval(() => {",
			"\t${0}",
			"}, ${1:interval});"
		]
	},
	"addEventListener": {
		"prefix": "ae",
		"body": "${1:document}.addEventListener('${2:event}', ${3:ev} => {\n\t${0}\n})"
	},
	"removeEventListener": {
		"prefix": "re",
		"body": "${1:document}.removeEventListener('${2:event}', ${3:listener})"
	},
	"getElementById": {
		"prefix": "gi",
		"body": "${1:document}.getElementById('${2:id}')"
	},
	"getElementsByClassName": {
		"prefix": "gc",
		"body": "Array.from(${1:document}.getElementsByClassName('${2:class}'))"
	},
	"getElementsByTagName": {
		"prefix": "gt",
		"body": "Array.from(${1:document}.getElementsByTagName('${2:tag}'))"
	},
	"querySelector": {
		"prefix": "qs",
		"body": "${1:document}.querySelector('${2:selector}')"
	},
	"querySelectorAll": {
		"prefix": "qsa",
		"body": "Array.from(${1:document}.querySelectorAll('${2:selector}'))"
	}
}
