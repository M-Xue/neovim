{
    "reactFunctionComponent": {
        "prefix": "rafc",
        "body": "\nconst $1 = () => {\n\treturn (\n\t\t$2\n\t)\n}",
        "description": "Creates a React function component"
    },
    "reactFunctionComponentExport": {
        "prefix": "rafce",
        "body": "\nconst ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t$1\n\t)\n}\n\nexport default ${TM_FILENAME_BASE}",
        "description": "Creates a React function component as default export"
    },
    "useState": {
        "prefix": [
            "us",
            "useState"
        ],
        "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initValue})$0",
        "description": "React useState() hook"
    },
    "useEffect": {
        "prefix": [
            "ue",
            "useEffect"
        ],
        "body": [
            "useEffect(() => {",
            "\t$1",
            "}, [${3:dependencies}])$0"
        ],
        "description": "React useEffect() hook"
    },
    "createContext": {
        "prefix": "cc",
        "body": [
            "export const $1 = createContext<$2>(",
            "\t(null as any) as $2",
            ")"
        ],
        "description": "creates a react context"
    },
    "useContext": {
        "prefix": "uc",
        "body": [
            "const $1 = useContext($2)$0"
        ],
        "description": "React useContext() hook"
    },
    "useRef": {
        "prefix": "ur",
        "body": [
            "const ${1:elName}El = useRef(null)$0"
        ],
        "description": "React useContext() hook"
    },
    "useCallback": {
        "prefix": "ucb",
        "body": [
            "const ${1:memoizedCallback} = useCallback(",
            "\t() => {",
            "\t\t${2:doSomething}(${3:a}, ${4:b})",
            "\t},",
            "\t[${5:a}, ${6:b}],",
            ")$0"
        ],
        "description": "React useCallback() hook"
    },
    "useMemo": {
        "prefix": "um",
        "body": [
            "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}, [${3:dependencies}])$0"
        ],
        "description": "React useMemo() hook"
    },
    "jsx elements map": {
        "prefix": "jm",
        "body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
        "description": "an element self closed"
    },
    "jsx elements map with return": {
        "prefix": "jmr",
        "body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
        "description": "an element self closed"
    },
    "jsx element wrap selection": {
        "prefix": "jsx wrap selection with element",
        "body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
        "description": "an element"
    },
    "createReactHook": {
        "prefix": "crh",
        "body": [
            "export const use$0 = () => {",
            "",
            "}"
        ],
        "description": "Create React Hook"
    },
    "createReactHookWithName": {
        "prefix": "crhn",
        "body": [
            "export const ${TM_FILENAME_BASE} = () => {",
            "\t$0",
            "}"
        ],
        "description": "Create React Hook using File name"
    }
}
